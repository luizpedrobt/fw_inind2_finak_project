
fw_inindII_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dd8  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002010  08002010  00003010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002060  08002060  00003060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002064  08002064  00003064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  20000000  08002068  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08002071  0000400c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000002c  08002071  0000402c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00004009  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005e74  00000000  00000000  0000403f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000f69  00000000  00000000  00009eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000658  00000000  00000000  0000ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000004a7  00000000  00000000  0000b478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000308c8  00000000  00000000  0000b91f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00006139  00000000  00000000  0003c1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001322c8  00000000  00000000  00042320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001745e8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000017d8  00000000  00000000  0017462c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000071  00000000  00000000  00175e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08001ff8 	.word	0x08001ff8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08001ff8 	.word	0x08001ff8

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f000 f95a 	bl	8000534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f805 	bl	800028e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 f85c 	bl	8000340 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_sm_init();
 8000288:	f001 fe82 	bl	8001f90 <app_sm_init>
 800028c:	e7fc      	b.n	8000288 <main+0x10>

0800028e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028e:	b580      	push	{r7, lr}
 8000290:	b09e      	sub	sp, #120	@ 0x78
 8000292:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	2260      	movs	r2, #96	@ 0x60
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f001 fe7e 	bl	8001f9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	463b      	mov	r3, r7
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
 80002b0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002b2:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80002b6:	f000 fb6b 	bl	8000990 <HAL_PWREx_ControlVoltageScaling>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80002c0:	f000 f886 	bl	80003d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c4:	2301      	movs	r3, #1
 80002c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	2302      	movs	r3, #2
 80002d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d2:	2303      	movs	r3, #3
 80002d4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV2;
 80002d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80002dc:	2303      	movs	r3, #3
 80002de:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 16;
 80002e0:	2310      	movs	r3, #16
 80002e2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80002e4:	2302      	movs	r3, #2
 80002e6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80002e8:	2302      	movs	r3, #2
 80002ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80002ec:	2301      	movs	r3, #1
 80002ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80002f0:	230c      	movs	r3, #12
 80002f2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0318 	add.w	r3, r7, #24
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fbd3 	bl	8000aa8 <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000308:	f000 f862 	bl	80003d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	231f      	movs	r3, #31
 800030e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	2303      	movs	r3, #3
 8000312:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	2104      	movs	r1, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f001 fa99 	bl	8001860 <HAL_RCC_ClockConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000334:	f000 f84c 	bl	80003d0 <Error_Handler>
  }
}
 8000338:	bf00      	nop
 800033a:	3778      	adds	r7, #120	@ 0x78
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000346:	4b21      	ldr	r3, [pc, #132]	@ (80003cc <MX_GPIO_Init+0x8c>)
 8000348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800034c:	4a1f      	ldr	r2, [pc, #124]	@ (80003cc <MX_GPIO_Init+0x8c>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000356:	4b1d      	ldr	r3, [pc, #116]	@ (80003cc <MX_GPIO_Init+0x8c>)
 8000358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800035c:	f003 0304 	and.w	r3, r3, #4
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000364:	4b19      	ldr	r3, [pc, #100]	@ (80003cc <MX_GPIO_Init+0x8c>)
 8000366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800036a:	4a18      	ldr	r2, [pc, #96]	@ (80003cc <MX_GPIO_Init+0x8c>)
 800036c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000370:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000374:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <MX_GPIO_Init+0x8c>)
 8000376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800037a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000382:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <MX_GPIO_Init+0x8c>)
 8000384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000388:	4a10      	ldr	r2, [pc, #64]	@ (80003cc <MX_GPIO_Init+0x8c>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <MX_GPIO_Init+0x8c>)
 8000394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4b0a      	ldr	r3, [pc, #40]	@ (80003cc <MX_GPIO_Init+0x8c>)
 80003a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003a6:	4a09      	ldr	r2, [pc, #36]	@ (80003cc <MX_GPIO_Init+0x8c>)
 80003a8:	f043 0302 	orr.w	r3, r3, #2
 80003ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <MX_GPIO_Init+0x8c>)
 80003b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003b6:	f003 0302 	and.w	r3, r3, #2
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	46020c00 	.word	0x46020c00

080003d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d4:	b672      	cpsid	i
}
 80003d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <Error_Handler+0x8>

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80003e2:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <HAL_MspInit+0x30>)
 80003e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80003e8:	4a08      	ldr	r2, [pc, #32]	@ (800040c <HAL_MspInit+0x30>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80003f2:	4b06      	ldr	r3, [pc, #24]	@ (800040c <HAL_MspInit+0x30>)
 80003f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80003f8:	f003 0304 	and.w	r3, r3, #4
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	46020c00 	.word	0x46020c00

08000410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <NMI_Handler+0x4>

08000418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <HardFault_Handler+0x4>

08000420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <MemManage_Handler+0x4>

08000428 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <BusFault_Handler+0x4>

08000430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000434:	bf00      	nop
 8000436:	e7fd      	b.n	8000434 <UsageFault_Handler+0x4>

08000438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000466:	f000 f90b 	bl	8000680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000474:	4b18      	ldr	r3, [pc, #96]	@ (80004d8 <SystemInit+0x68>)
 8000476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800047a:	4a17      	ldr	r2, [pc, #92]	@ (80004d8 <SystemInit+0x68>)
 800047c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000484:	4b15      	ldr	r3, [pc, #84]	@ (80004dc <SystemInit+0x6c>)
 8000486:	2201      	movs	r2, #1
 8000488:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800048a:	4b14      	ldr	r3, [pc, #80]	@ (80004dc <SystemInit+0x6c>)
 800048c:	2200      	movs	r2, #0
 800048e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000490:	4b12      	ldr	r3, [pc, #72]	@ (80004dc <SystemInit+0x6c>)
 8000492:	2200      	movs	r2, #0
 8000494:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000496:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <SystemInit+0x6c>)
 8000498:	2200      	movs	r2, #0
 800049a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800049c:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <SystemInit+0x6c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a0e      	ldr	r2, [pc, #56]	@ (80004dc <SystemInit+0x6c>)
 80004a2:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80004a6:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80004aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80004ac:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <SystemInit+0x6c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80004b2:	4b0a      	ldr	r3, [pc, #40]	@ (80004dc <SystemInit+0x6c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a09      	ldr	r2, [pc, #36]	@ (80004dc <SystemInit+0x6c>)
 80004b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80004bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80004be:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <SystemInit+0x6c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004c4:	4b04      	ldr	r3, [pc, #16]	@ (80004d8 <SystemInit+0x68>)
 80004c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80004ca:	609a      	str	r2, [r3, #8]
  #endif
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000ed00 	.word	0xe000ed00
 80004dc:	46020c00 	.word	0x46020c00

080004e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80004e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000518 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e4:	f7ff ffc4 	bl	8000470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004ea:	e003      	b.n	80004f4 <LoopCopyDataInit>

080004ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004ec:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004f2:	3104      	adds	r1, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004f4:	480a      	ldr	r0, [pc, #40]	@ (8000520 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000524 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004fc:	d3f6      	bcc.n	80004ec <CopyDataInit>
	ldr	r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000500:	e002      	b.n	8000508 <LoopFillZerobss>

08000502 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000502:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000504:	f842 3b04 	str.w	r3, [r2], #4

08000508 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000508:	4b08      	ldr	r3, [pc, #32]	@ (800052c <LoopForever+0x16>)
	cmp	r2, r3
 800050a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800050c:	d3f9      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050e:	f001 fd4f 	bl	8001fb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000512:	f7ff feb1 	bl	8000278 <main>

08000516 <LoopForever>:

LoopForever:
    b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000518:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800051c:	08002068 	.word	0x08002068
	ldr	r0, =_sdata
 8000520:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000524:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000528:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800052c:	2000002c 	.word	0x2000002c

08000530 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_IRQHandler>
	...

08000534 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <HAL_Init+0x50>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a11      	ldr	r2, [pc, #68]	@ (8000584 <HAL_Init+0x50>)
 800053e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f94a 	bl	80007de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800054a:	f001 fb7b 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 800054e:	4602      	mov	r2, r0
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <HAL_Init+0x54>)
 8000552:	6a1b      	ldr	r3, [r3, #32]
 8000554:	f003 030f 	and.w	r3, r3, #15
 8000558:	490c      	ldr	r1, [pc, #48]	@ (800058c <HAL_Init+0x58>)
 800055a:	5ccb      	ldrb	r3, [r1, r3]
 800055c:	fa22 f303 	lsr.w	r3, r2, r3
 8000560:	4a0b      	ldr	r2, [pc, #44]	@ (8000590 <HAL_Init+0x5c>)
 8000562:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000564:	2004      	movs	r0, #4
 8000566:	f000 f981 	bl	800086c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800056a:	200f      	movs	r0, #15
 800056c:	f000 f812 	bl	8000594 <HAL_InitTick>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	e002      	b.n	8000580 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800057a:	f7ff ff2f 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40022000 	.word	0x40022000
 8000588:	46020c00 	.word	0x46020c00
 800058c:	08002010 	.word	0x08002010
 8000590:	20000000 	.word	0x20000000

08000594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80005a0:	4b33      	ldr	r3, [pc, #204]	@ (8000670 <HAL_InitTick+0xdc>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d101      	bne.n	80005ac <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80005a8:	2301      	movs	r3, #1
 80005aa:	e05c      	b.n	8000666 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80005ac:	4b31      	ldr	r3, [pc, #196]	@ (8000674 <HAL_InitTick+0xe0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	d10c      	bne.n	80005d2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80005b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000678 <HAL_InitTick+0xe4>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <HAL_InitTick+0xdc>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e037      	b.n	8000642 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80005d2:	f000 f9a3 	bl	800091c <HAL_SYSTICK_GetCLKSourceConfig>
 80005d6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d023      	beq.n	8000626 <HAL_InitTick+0x92>
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d82d      	bhi.n	8000640 <HAL_InitTick+0xac>
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d003      	beq.n	80005f2 <HAL_InitTick+0x5e>
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d00d      	beq.n	800060c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80005f0:	e026      	b.n	8000640 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80005f2:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <HAL_InitTick+0xe4>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <HAL_InitTick+0xdc>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4619      	mov	r1, r3
 80005fc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000600:	fbb3 f3f1 	udiv	r3, r3, r1
 8000604:	fbb2 f3f3 	udiv	r3, r2, r3
 8000608:	60fb      	str	r3, [r7, #12]
        break;
 800060a:	e01a      	b.n	8000642 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800060c:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <HAL_InitTick+0xdc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000616:	fbb3 f3f2 	udiv	r3, r3, r2
 800061a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	60fb      	str	r3, [r7, #12]
        break;
 8000624:	e00d      	b.n	8000642 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <HAL_InitTick+0xdc>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000630:	fbb3 f3f2 	udiv	r3, r3, r2
 8000634:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000638:	fbb2 f3f3 	udiv	r3, r2, r3
 800063c:	60fb      	str	r3, [r7, #12]
        break;
 800063e:	e000      	b.n	8000642 <HAL_InitTick+0xae>
        break;
 8000640:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f000 f8f0 	bl	8000828 <HAL_SYSTICK_Config>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	e009      	b.n	8000666 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000652:	2200      	movs	r2, #0
 8000654:	6879      	ldr	r1, [r7, #4]
 8000656:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800065a:	f000 f8cb 	bl	80007f4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800065e:	4a07      	ldr	r2, [pc, #28]	@ (800067c <HAL_InitTick+0xe8>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000008 	.word	0x20000008
 8000674:	e000e010 	.word	0xe000e010
 8000678:	20000000 	.word	0x20000000
 800067c:	20000004 	.word	0x20000004

08000680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <HAL_IncTick+0x20>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <HAL_IncTick+0x24>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4413      	add	r3, r2
 8000690:	4a04      	ldr	r2, [pc, #16]	@ (80006a4 <HAL_IncTick+0x24>)
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000028 	.word	0x20000028

080006a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return uwTick;
 80006ac:	4b03      	ldr	r3, [pc, #12]	@ (80006bc <HAL_GetTick+0x14>)
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028

080006c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f2:	4a04      	ldr	r2, [pc, #16]	@ (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	60d3      	str	r3, [r2, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800070c:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <__NVIC_GetPriorityGrouping+0x18>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	f003 0307 	and.w	r3, r3, #7
}
 8000716:	4618      	mov	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db0a      	blt.n	800074e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	490c      	ldr	r1, [pc, #48]	@ (8000770 <__NVIC_SetPriority+0x4c>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	0112      	lsls	r2, r2, #4
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	440b      	add	r3, r1
 8000748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800074c:	e00a      	b.n	8000764 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4908      	ldr	r1, [pc, #32]	@ (8000774 <__NVIC_SetPriority+0x50>)
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	f003 030f 	and.w	r3, r3, #15
 800075a:	3b04      	subs	r3, #4
 800075c:	0112      	lsls	r2, r2, #4
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	440b      	add	r3, r1
 8000762:	761a      	strb	r2, [r3, #24]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000e100 	.word	0xe000e100
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000778:	b480      	push	{r7}
 800077a:	b089      	sub	sp, #36	@ 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f1c3 0307 	rsb	r3, r3, #7
 8000792:	2b04      	cmp	r3, #4
 8000794:	bf28      	it	cs
 8000796:	2304      	movcs	r3, #4
 8000798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3304      	adds	r3, #4
 800079e:	2b06      	cmp	r3, #6
 80007a0:	d902      	bls.n	80007a8 <NVIC_EncodePriority+0x30>
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3b03      	subs	r3, #3
 80007a6:	e000      	b.n	80007aa <NVIC_EncodePriority+0x32>
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43da      	mvns	r2, r3
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	401a      	ands	r2, r3
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	43d9      	mvns	r1, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	4313      	orrs	r3, r2
         );
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3724      	adds	r7, #36	@ 0x24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff6a 	bl	80006c0 <__NVIC_SetPriorityGrouping>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
 8000800:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000802:	f7ff ff81 	bl	8000708 <__NVIC_GetPriorityGrouping>
 8000806:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	68b9      	ldr	r1, [r7, #8]
 800080c:	6978      	ldr	r0, [r7, #20]
 800080e:	f7ff ffb3 	bl	8000778 <NVIC_EncodePriority>
 8000812:	4602      	mov	r2, r0
 8000814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff82 	bl	8000724 <__NVIC_SetPriority>
}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000838:	d301      	bcc.n	800083e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800083a:	2301      	movs	r3, #1
 800083c:	e00d      	b.n	800085a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800083e:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <HAL_SYSTICK_Config+0x40>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <HAL_SYSTICK_Config+0x40>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_SYSTICK_Config+0x40>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a05      	ldr	r2, [pc, #20]	@ (8000868 <HAL_SYSTICK_Config+0x40>)
 8000852:	f043 0303 	orr.w	r3, r3, #3
 8000856:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e010 	.word	0xe000e010

0800086c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b04      	cmp	r3, #4
 8000878:	d844      	bhi.n	8000904 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800087a:	a201      	add	r2, pc, #4	@ (adr r2, 8000880 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800087c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000880:	080008a3 	.word	0x080008a3
 8000884:	080008c1 	.word	0x080008c1
 8000888:	080008e3 	.word	0x080008e3
 800088c:	08000905 	.word	0x08000905
 8000890:	08000895 	.word	0x08000895
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000894:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a1e      	ldr	r2, [pc, #120]	@ (8000914 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6013      	str	r3, [r2, #0]
      break;
 80008a0:	e031      	b.n	8000906 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80008a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000914 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008a8:	f023 0304 	bic.w	r3, r3, #4
 80008ac:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80008ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b4:	4a18      	ldr	r2, [pc, #96]	@ (8000918 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80008b6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80008ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80008be:	e022      	b.n	8000906 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a13      	ldr	r2, [pc, #76]	@ (8000914 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008c6:	f023 0304 	bic.w	r3, r3, #4
 80008ca:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80008d6:	4a10      	ldr	r2, [pc, #64]	@ (8000918 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80008d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80008e0:	e011      	b.n	8000906 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000914 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008e8:	f023 0304 	bic.w	r3, r3, #4
 80008ec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80008ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80008f8:	4a07      	ldr	r2, [pc, #28]	@ (8000918 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80008fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000902:	e000      	b.n	8000906 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000904:	bf00      	nop
  }
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e010 	.word	0xe000e010
 8000918:	46020c00 	.word	0x46020c00

0800091c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000922:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800092e:	2304      	movs	r3, #4
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	e021      	b.n	8000978 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800093e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000946:	d011      	beq.n	800096c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800094e:	d810      	bhi.n	8000972 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d004      	beq.n	8000960 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800095c:	d003      	beq.n	8000966 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800095e:	e008      	b.n	8000972 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
        break;
 8000964:	e008      	b.n	8000978 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000966:	2301      	movs	r3, #1
 8000968:	607b      	str	r3, [r7, #4]
        break;
 800096a:	e005      	b.n	8000978 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800096c:	2302      	movs	r3, #2
 800096e:	607b      	str	r3, [r7, #4]
        break;
 8000970:	e002      	b.n	8000978 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
        break;
 8000976:	bf00      	nop
    }
  }
  return systick_source;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e010 	.word	0xe000e010
 800098c:	46020c00 	.word	0x46020c00

08000990 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000998:	4b39      	ldr	r3, [pc, #228]	@ (8000a80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800099a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800099c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009a0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d10b      	bne.n	80009c2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80009b0:	d905      	bls.n	80009be <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80009b2:	4b33      	ldr	r3, [pc, #204]	@ (8000a80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	4a32      	ldr	r2, [pc, #200]	@ (8000a80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80009b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009bc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	e057      	b.n	8000a72 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80009c8:	d90a      	bls.n	80009e0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80009ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000a80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	4a2a      	ldr	r2, [pc, #168]	@ (8000a80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80009d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009dc:	60d3      	str	r3, [r2, #12]
 80009de:	e007      	b.n	80009f0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80009e8:	4925      	ldr	r1, [pc, #148]	@ (8000a80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80009f0:	4b24      	ldr	r3, [pc, #144]	@ (8000a84 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a24      	ldr	r2, [pc, #144]	@ (8000a88 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80009f6:	fba2 2303 	umull	r2, r3, r2, r3
 80009fa:	099b      	lsrs	r3, r3, #6
 80009fc:	2232      	movs	r2, #50	@ 0x32
 80009fe:	fb02 f303 	mul.w	r3, r2, r3
 8000a02:	4a21      	ldr	r2, [pc, #132]	@ (8000a88 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000a04:	fba2 2303 	umull	r2, r3, r2, r3
 8000a08:	099b      	lsrs	r3, r3, #6
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000a0e:	e002      	b.n	8000a16 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d102      	bne.n	8000a28 <HAL_PWREx_ControlVoltageScaling+0x98>
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1f3      	bne.n	8000a10 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d01b      	beq.n	8000a66 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a15      	ldr	r2, [pc, #84]	@ (8000a88 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000a34:	fba2 2303 	umull	r2, r3, r2, r3
 8000a38:	099b      	lsrs	r3, r3, #6
 8000a3a:	2232      	movs	r2, #50	@ 0x32
 8000a3c:	fb02 f303 	mul.w	r3, r2, r3
 8000a40:	4a11      	ldr	r2, [pc, #68]	@ (8000a88 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000a42:	fba2 2303 	umull	r2, r3, r2, r3
 8000a46:	099b      	lsrs	r3, r3, #6
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000a4c:	e002      	b.n	8000a54 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1f3      	bne.n	8000a4e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d101      	bne.n	8000a70 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	46020800 	.word	0x46020800
 8000a84:	20000000 	.word	0x20000000
 8000a88:	10624dd3 	.word	0x10624dd3

08000a8c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8000a90:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	46020800 	.word	0x46020800

08000aa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	@ 0x38
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	f000 bec8 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ac2:	4b99      	ldr	r3, [pc, #612]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 030c 	and.w	r3, r3, #12
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000acc:	4b96      	ldr	r3, [pc, #600]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 816c 	beq.w	8000dbc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d007      	beq.n	8000afa <HAL_RCC_OscConfig+0x52>
 8000aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000aec:	2b0c      	cmp	r3, #12
 8000aee:	f040 80de 	bne.w	8000cae <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	f040 80da 	bne.w	8000cae <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d102      	bne.n	8000b08 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	f000 bea5 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b0c:	4b86      	ldr	r3, [pc, #536]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d004      	beq.n	8000b22 <HAL_RCC_OscConfig+0x7a>
 8000b18:	4b83      	ldr	r3, [pc, #524]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8000b20:	e005      	b.n	8000b2e <HAL_RCC_OscConfig+0x86>
 8000b22:	4b81      	ldr	r3, [pc, #516]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b28:	041b      	lsls	r3, r3, #16
 8000b2a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d255      	bcs.n	8000bde <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10a      	bne.n	8000b4e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 f9a1 	bl	8001e84 <RCC_SetFlashLatencyFromMSIRange>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f000 be82 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000b4e:	4b76      	ldr	r3, [pc, #472]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	4a75      	ldr	r2, [pc, #468]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000b54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b58:	6093      	str	r3, [r2, #8]
 8000b5a:	4b73      	ldr	r3, [pc, #460]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b66:	4970      	ldr	r1, [pc, #448]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b70:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000b74:	d309      	bcc.n	8000b8a <HAL_RCC_OscConfig+0xe2>
 8000b76:	4b6c      	ldr	r3, [pc, #432]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	f023 021f 	bic.w	r2, r3, #31
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a1b      	ldr	r3, [r3, #32]
 8000b82:	4969      	ldr	r1, [pc, #420]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000b84:	4313      	orrs	r3, r2
 8000b86:	60cb      	str	r3, [r1, #12]
 8000b88:	e07e      	b.n	8000c88 <HAL_RCC_OscConfig+0x1e0>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	da0a      	bge.n	8000ba8 <HAL_RCC_OscConfig+0x100>
 8000b92:	4b65      	ldr	r3, [pc, #404]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a1b      	ldr	r3, [r3, #32]
 8000b9e:	015b      	lsls	r3, r3, #5
 8000ba0:	4961      	ldr	r1, [pc, #388]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	60cb      	str	r3, [r1, #12]
 8000ba6:	e06f      	b.n	8000c88 <HAL_RCC_OscConfig+0x1e0>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bb0:	d30a      	bcc.n	8000bc8 <HAL_RCC_OscConfig+0x120>
 8000bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6a1b      	ldr	r3, [r3, #32]
 8000bbe:	029b      	lsls	r3, r3, #10
 8000bc0:	4959      	ldr	r1, [pc, #356]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	60cb      	str	r3, [r1, #12]
 8000bc6:	e05f      	b.n	8000c88 <HAL_RCC_OscConfig+0x1e0>
 8000bc8:	4b57      	ldr	r3, [pc, #348]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	03db      	lsls	r3, r3, #15
 8000bd6:	4954      	ldr	r1, [pc, #336]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	60cb      	str	r3, [r1, #12]
 8000bdc:	e054      	b.n	8000c88 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000bde:	4b52      	ldr	r3, [pc, #328]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	4a51      	ldr	r2, [pc, #324]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000be4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000be8:	6093      	str	r3, [r2, #8]
 8000bea:	4b4f      	ldr	r3, [pc, #316]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf6:	494c      	ldr	r1, [pc, #304]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c00:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000c04:	d309      	bcc.n	8000c1a <HAL_RCC_OscConfig+0x172>
 8000c06:	4b48      	ldr	r3, [pc, #288]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	f023 021f 	bic.w	r2, r3, #31
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a1b      	ldr	r3, [r3, #32]
 8000c12:	4945      	ldr	r1, [pc, #276]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60cb      	str	r3, [r1, #12]
 8000c18:	e028      	b.n	8000c6c <HAL_RCC_OscConfig+0x1c4>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	da0a      	bge.n	8000c38 <HAL_RCC_OscConfig+0x190>
 8000c22:	4b41      	ldr	r3, [pc, #260]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a1b      	ldr	r3, [r3, #32]
 8000c2e:	015b      	lsls	r3, r3, #5
 8000c30:	493d      	ldr	r1, [pc, #244]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000c32:	4313      	orrs	r3, r2
 8000c34:	60cb      	str	r3, [r1, #12]
 8000c36:	e019      	b.n	8000c6c <HAL_RCC_OscConfig+0x1c4>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c40:	d30a      	bcc.n	8000c58 <HAL_RCC_OscConfig+0x1b0>
 8000c42:	4b39      	ldr	r3, [pc, #228]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6a1b      	ldr	r3, [r3, #32]
 8000c4e:	029b      	lsls	r3, r3, #10
 8000c50:	4935      	ldr	r1, [pc, #212]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000c52:	4313      	orrs	r3, r2
 8000c54:	60cb      	str	r3, [r1, #12]
 8000c56:	e009      	b.n	8000c6c <HAL_RCC_OscConfig+0x1c4>
 8000c58:	4b33      	ldr	r3, [pc, #204]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	03db      	lsls	r3, r3, #15
 8000c66:	4930      	ldr	r1, [pc, #192]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d10a      	bne.n	8000c88 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f904 	bl	8001e84 <RCC_SetFlashLatencyFromMSIRange>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	f000 bde5 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8000c88:	f001 f8e2 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000c8c:	4b27      	ldr	r3, [pc, #156]	@ (8000d2c <HAL_RCC_OscConfig+0x284>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fc7f 	bl	8000594 <HAL_InitTick>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8000c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f000 808a 	beq.w	8000dba <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8000ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000caa:	f000 bdd2 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d066      	beq.n	8000d84 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000cc2:	f7ff fcf1 	bl	80006a8 <HAL_GetTick>
 8000cc6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8000cc8:	e009      	b.n	8000cde <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cca:	f7ff fced 	bl	80006a8 <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d902      	bls.n	8000cde <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	f000 bdba 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8000cde:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0ef      	beq.n	8000cca <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	4a0e      	ldr	r2, [pc, #56]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000cf0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000cf4:	6093      	str	r3, [r2, #8]
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d02:	4909      	ldr	r1, [pc, #36]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000d04:	4313      	orrs	r3, r2
 8000d06:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d0c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000d10:	d30e      	bcc.n	8000d30 <HAL_RCC_OscConfig+0x288>
 8000d12:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	f023 021f 	bic.w	r2, r3, #31
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	4902      	ldr	r1, [pc, #8]	@ (8000d28 <HAL_RCC_OscConfig+0x280>)
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60cb      	str	r3, [r1, #12]
 8000d24:	e04a      	b.n	8000dbc <HAL_RCC_OscConfig+0x314>
 8000d26:	bf00      	nop
 8000d28:	46020c00 	.word	0x46020c00
 8000d2c:	20000004 	.word	0x20000004
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da0a      	bge.n	8000d4e <HAL_RCC_OscConfig+0x2a6>
 8000d38:	4b98      	ldr	r3, [pc, #608]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	015b      	lsls	r3, r3, #5
 8000d46:	4995      	ldr	r1, [pc, #596]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	60cb      	str	r3, [r1, #12]
 8000d4c:	e036      	b.n	8000dbc <HAL_RCC_OscConfig+0x314>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d56:	d30a      	bcc.n	8000d6e <HAL_RCC_OscConfig+0x2c6>
 8000d58:	4b90      	ldr	r3, [pc, #576]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a1b      	ldr	r3, [r3, #32]
 8000d64:	029b      	lsls	r3, r3, #10
 8000d66:	498d      	ldr	r1, [pc, #564]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60cb      	str	r3, [r1, #12]
 8000d6c:	e026      	b.n	8000dbc <HAL_RCC_OscConfig+0x314>
 8000d6e:	4b8b      	ldr	r3, [pc, #556]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a1b      	ldr	r3, [r3, #32]
 8000d7a:	03db      	lsls	r3, r3, #15
 8000d7c:	4987      	ldr	r1, [pc, #540]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	60cb      	str	r3, [r1, #12]
 8000d82:	e01b      	b.n	8000dbc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8000d84:	4b85      	ldr	r3, [pc, #532]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a84      	ldr	r2, [pc, #528]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000d8a:	f023 0301 	bic.w	r3, r3, #1
 8000d8e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000d90:	f7ff fc8a 	bl	80006a8 <HAL_GetTick>
 8000d94:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8000d96:	e009      	b.n	8000dac <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d98:	f7ff fc86 	bl	80006a8 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d902      	bls.n	8000dac <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	f000 bd53 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8000dac:	4b7b      	ldr	r3, [pc, #492]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1ef      	bne.n	8000d98 <HAL_RCC_OscConfig+0x2f0>
 8000db8:	e000      	b.n	8000dbc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000dba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 808b 	beq.w	8000ee0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dcc:	2b08      	cmp	r3, #8
 8000dce:	d005      	beq.n	8000ddc <HAL_RCC_OscConfig+0x334>
 8000dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dd2:	2b0c      	cmp	r3, #12
 8000dd4:	d109      	bne.n	8000dea <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d106      	bne.n	8000dea <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d17d      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f000 bd34 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000df2:	d106      	bne.n	8000e02 <HAL_RCC_OscConfig+0x35a>
 8000df4:	4b69      	ldr	r3, [pc, #420]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a68      	ldr	r2, [pc, #416]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e041      	b.n	8000e86 <HAL_RCC_OscConfig+0x3de>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e0a:	d112      	bne.n	8000e32 <HAL_RCC_OscConfig+0x38a>
 8000e0c:	4b63      	ldr	r3, [pc, #396]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a62      	ldr	r2, [pc, #392]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b60      	ldr	r3, [pc, #384]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a5f      	ldr	r2, [pc, #380]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e1e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b5d      	ldr	r3, [pc, #372]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a5c      	ldr	r2, [pc, #368]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e029      	b.n	8000e86 <HAL_RCC_OscConfig+0x3de>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8000e3a:	d112      	bne.n	8000e62 <HAL_RCC_OscConfig+0x3ba>
 8000e3c:	4b57      	ldr	r3, [pc, #348]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a56      	ldr	r2, [pc, #344]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b54      	ldr	r3, [pc, #336]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a53      	ldr	r2, [pc, #332]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b51      	ldr	r3, [pc, #324]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a50      	ldr	r2, [pc, #320]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	e011      	b.n	8000e86 <HAL_RCC_OscConfig+0x3de>
 8000e62:	4b4e      	ldr	r3, [pc, #312]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a4d      	ldr	r2, [pc, #308]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	4b4b      	ldr	r3, [pc, #300]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a4a      	ldr	r2, [pc, #296]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	4b48      	ldr	r3, [pc, #288]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a47      	ldr	r2, [pc, #284]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000e80:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000e84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d014      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fc0b 	bl	80006a8 <HAL_GetTick>
 8000e92:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e94:	e009      	b.n	8000eaa <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e96:	f7ff fc07 	bl	80006a8 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b64      	cmp	r3, #100	@ 0x64
 8000ea2:	d902      	bls.n	8000eaa <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	f000 bcd4 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eaa:	4b3c      	ldr	r3, [pc, #240]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0ef      	beq.n	8000e96 <HAL_RCC_OscConfig+0x3ee>
 8000eb6:	e013      	b.n	8000ee0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fbf6 	bl	80006a8 <HAL_GetTick>
 8000ebc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ebe:	e009      	b.n	8000ed4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fbf2 	bl	80006a8 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	@ 0x64
 8000ecc:	d902      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	f000 bcbf 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ed4:	4b31      	ldr	r3, [pc, #196]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1ef      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d05f      	beq.n	8000fac <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d005      	beq.n	8000efe <HAL_RCC_OscConfig+0x456>
 8000ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ef4:	2b0c      	cmp	r3, #12
 8000ef6:	d114      	bne.n	8000f22 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d111      	bne.n	8000f22 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	f000 bca3 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8000f0c:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	4920      	ldr	r1, [pc, #128]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000f20:	e044      	b.n	8000fac <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d024      	beq.n	8000f74 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f34:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000f36:	f7ff fbb7 	bl	80006a8 <HAL_GetTick>
 8000f3a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f3c:	e009      	b.n	8000f52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fbb3 	bl	80006a8 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d902      	bls.n	8000f52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f000 bc80 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f52:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0ef      	beq.n	8000f3e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	490b      	ldr	r1, [pc, #44]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	610b      	str	r3, [r1, #16]
 8000f72:	e01b      	b.n	8000fac <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8000f74:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f7e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000f80:	f7ff fb92 	bl	80006a8 <HAL_GetTick>
 8000f84:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f86:	e00b      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f88:	f7ff fb8e 	bl	80006a8 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d904      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f000 bc5b 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
 8000f9c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fa0:	4baf      	ldr	r3, [pc, #700]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ed      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80c8 	beq.w	800114a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc0:	4ba7      	ldr	r3, [pc, #668]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8000fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d111      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4ba4      	ldr	r3, [pc, #656]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8000fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fd4:	4aa2      	ldr	r2, [pc, #648]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000fde:	4ba0      	ldr	r3, [pc, #640]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8000fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8000ff2:	4b9c      	ldr	r3, [pc, #624]	@ (8001264 <HAL_RCC_OscConfig+0x7bc>)
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d119      	bne.n	8001032 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8000ffe:	4b99      	ldr	r3, [pc, #612]	@ (8001264 <HAL_RCC_OscConfig+0x7bc>)
 8001000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001002:	4a98      	ldr	r2, [pc, #608]	@ (8001264 <HAL_RCC_OscConfig+0x7bc>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800100a:	f7ff fb4d 	bl	80006a8 <HAL_GetTick>
 800100e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001010:	e009      	b.n	8001026 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001012:	f7ff fb49 	bl	80006a8 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d902      	bls.n	8001026 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	f000 bc16 	b.w	8001852 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001026:	4b8f      	ldr	r3, [pc, #572]	@ (8001264 <HAL_RCC_OscConfig+0x7bc>)
 8001028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0ef      	beq.n	8001012 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d05f      	beq.n	80010fa <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800103a:	4b89      	ldr	r3, [pc, #548]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 800103c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001040:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104c:	429a      	cmp	r2, r3
 800104e:	d037      	beq.n	80010c0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e3f4      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d01b      	beq.n	80010aa <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001072:	4b7b      	ldr	r3, [pc, #492]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8001074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001078:	4a79      	ldr	r2, [pc, #484]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 800107a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800107e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8001082:	f7ff fb11 	bl	80006a8 <HAL_GetTick>
 8001086:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108a:	f7ff fb0d 	bl	80006a8 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b05      	cmp	r3, #5
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e3da      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800109c:	4b70      	ldr	r3, [pc, #448]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 800109e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1ef      	bne.n	800108a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80010aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 80010ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4969      	ldr	r1, [pc, #420]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80010c0:	4b67      	ldr	r3, [pc, #412]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 80010c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010c6:	4a66      	ldr	r2, [pc, #408]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 80010c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80010d0:	f7ff faea 	bl	80006a8 <HAL_GetTick>
 80010d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fae6 	bl	80006a8 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e3b3      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80010ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 80010ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0ef      	beq.n	80010d8 <HAL_RCC_OscConfig+0x630>
 80010f8:	e01b      	b.n	8001132 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80010fa:	4b59      	ldr	r3, [pc, #356]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 80010fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001100:	4a57      	ldr	r2, [pc, #348]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8001102:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001106:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800110a:	f7ff facd 	bl	80006a8 <HAL_GetTick>
 800110e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fac9 	bl	80006a8 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b05      	cmp	r3, #5
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e396      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001124:	4b4e      	ldr	r3, [pc, #312]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8001126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800112a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1ef      	bne.n	8001112 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001132:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001136:	2b01      	cmp	r3, #1
 8001138:	d107      	bne.n	800114a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800113a:	4b49      	ldr	r3, [pc, #292]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 800113c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001140:	4a47      	ldr	r2, [pc, #284]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8001142:	f023 0304 	bic.w	r3, r3, #4
 8001146:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8111 	beq.w	800137a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115e:	4b40      	ldr	r3, [pc, #256]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8001160:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d111      	bne.n	8001190 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 800116e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001172:	4a3b      	ldr	r2, [pc, #236]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800117c:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 800117e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800118a:	2301      	movs	r3, #1
 800118c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001190:	4b34      	ldr	r3, [pc, #208]	@ (8001264 <HAL_RCC_OscConfig+0x7bc>)
 8001192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d118      	bne.n	80011ce <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800119c:	4b31      	ldr	r3, [pc, #196]	@ (8001264 <HAL_RCC_OscConfig+0x7bc>)
 800119e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a0:	4a30      	ldr	r2, [pc, #192]	@ (8001264 <HAL_RCC_OscConfig+0x7bc>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fa7e 	bl	80006a8 <HAL_GetTick>
 80011ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b0:	f7ff fa7a 	bl	80006a8 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e347      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80011c2:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <HAL_RCC_OscConfig+0x7bc>)
 80011c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d01f      	beq.n	800121a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d010      	beq.n	8001208 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80011e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 80011e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 80011f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011fc:	4a18      	ldr	r2, [pc, #96]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001206:	e018      	b.n	800123a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 800120a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800120e:	4a14      	ldr	r2, [pc, #80]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001218:	e00f      	b.n	800123a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 800121c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001220:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 800122c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001230:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <HAL_RCC_OscConfig+0x7b8>)
 8001232:	f023 0304 	bic.w	r3, r3, #4
 8001236:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d057      	beq.n	80012f2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001242:	f7ff fa31 	bl	80006a8 <HAL_GetTick>
 8001246:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001248:	e00e      	b.n	8001268 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124a:	f7ff fa2d 	bl	80006a8 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001258:	4293      	cmp	r3, r2
 800125a:	d905      	bls.n	8001268 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e2f8      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
 8001260:	46020c00 	.word	0x46020c00
 8001264:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001268:	4b9c      	ldr	r3, [pc, #624]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 800126a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0e9      	beq.n	800124a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800127e:	2b00      	cmp	r3, #0
 8001280:	d01b      	beq.n	80012ba <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001282:	4b96      	ldr	r3, [pc, #600]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001288:	4a94      	ldr	r2, [pc, #592]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 800128a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800128e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001292:	e00a      	b.n	80012aa <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001294:	f7ff fa08 	bl	80006a8 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e2d3      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80012aa:	4b8c      	ldr	r3, [pc, #560]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 80012ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0ed      	beq.n	8001294 <HAL_RCC_OscConfig+0x7ec>
 80012b8:	e053      	b.n	8001362 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80012ba:	4b88      	ldr	r3, [pc, #544]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 80012bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012c0:	4a86      	ldr	r2, [pc, #536]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 80012c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f7ff f9ec 	bl	80006a8 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e2b7      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80012e2:	4b7e      	ldr	r3, [pc, #504]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 80012e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ed      	bne.n	80012cc <HAL_RCC_OscConfig+0x824>
 80012f0:	e037      	b.n	8001362 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80012f2:	f7ff f9d9 	bl	80006a8 <HAL_GetTick>
 80012f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012f8:	e00a      	b.n	8001310 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012fa:	f7ff f9d5 	bl	80006a8 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001308:	4293      	cmp	r3, r2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e2a0      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001310:	4b72      	ldr	r3, [pc, #456]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1ed      	bne.n	80012fa <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800131e:	4b6f      	ldr	r3, [pc, #444]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001328:	2b00      	cmp	r3, #0
 800132a:	d01a      	beq.n	8001362 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800132c:	4b6b      	ldr	r3, [pc, #428]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 800132e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001332:	4a6a      	ldr	r2, [pc, #424]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001334:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001338:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800133c:	e00a      	b.n	8001354 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133e:	f7ff f9b3 	bl	80006a8 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800134c:	4293      	cmp	r3, r2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e27e      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001354:	4b61      	ldr	r3, [pc, #388]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800135a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1ed      	bne.n	800133e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001362:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001366:	2b01      	cmp	r3, #1
 8001368:	d107      	bne.n	800137a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136a:	4b5c      	ldr	r3, [pc, #368]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 800136c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001370:	4a5a      	ldr	r2, [pc, #360]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001372:	f023 0304 	bic.w	r3, r3, #4
 8001376:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	2b00      	cmp	r3, #0
 8001384:	d036      	beq.n	80013f4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138a:	2b00      	cmp	r3, #0
 800138c:	d019      	beq.n	80013c2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800138e:	4b53      	ldr	r3, [pc, #332]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a52      	ldr	r2, [pc, #328]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001394:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001398:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800139a:	f7ff f985 	bl	80006a8 <HAL_GetTick>
 800139e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013a2:	f7ff f981 	bl	80006a8 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e24e      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80013b4:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x8fa>
 80013c0:	e018      	b.n	80013f4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80013c2:	4b46      	ldr	r3, [pc, #280]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a45      	ldr	r2, [pc, #276]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 80013c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80013cc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80013ce:	f7ff f96b 	bl	80006a8 <HAL_GetTick>
 80013d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013d6:	f7ff f967 	bl	80006a8 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e234      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80013e8:	4b3c      	ldr	r3, [pc, #240]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f0      	bne.n	80013d6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d036      	beq.n	800146e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001404:	2b00      	cmp	r3, #0
 8001406:	d019      	beq.n	800143c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001408:	4b34      	ldr	r3, [pc, #208]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a33      	ldr	r2, [pc, #204]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 800140e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001412:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001414:	f7ff f948 	bl	80006a8 <HAL_GetTick>
 8001418:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800141c:	f7ff f944 	bl	80006a8 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e211      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800142e:	4b2b      	ldr	r3, [pc, #172]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x974>
 800143a:	e018      	b.n	800146e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800143c:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a26      	ldr	r2, [pc, #152]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001442:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001446:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001448:	f7ff f92e 	bl	80006a8 <HAL_GetTick>
 800144c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001450:	f7ff f92a 	bl	80006a8 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e1f7      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001462:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001476:	2b00      	cmp	r3, #0
 8001478:	d07f      	beq.n	800157a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147e:	2b00      	cmp	r3, #0
 8001480:	d062      	beq.n	8001548 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001482:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	4a15      	ldr	r2, [pc, #84]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001488:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800148c:	6093      	str	r3, [r2, #8]
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149a:	4910      	ldr	r1, [pc, #64]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 800149c:	4313      	orrs	r3, r2
 800149e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80014a8:	d309      	bcc.n	80014be <HAL_RCC_OscConfig+0xa16>
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	f023 021f 	bic.w	r2, r3, #31
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4909      	ldr	r1, [pc, #36]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60cb      	str	r3, [r1, #12]
 80014bc:	e02a      	b.n	8001514 <HAL_RCC_OscConfig+0xa6c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da0c      	bge.n	80014e0 <HAL_RCC_OscConfig+0xa38>
 80014c6:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	015b      	lsls	r3, r3, #5
 80014d4:	4901      	ldr	r1, [pc, #4]	@ (80014dc <HAL_RCC_OscConfig+0xa34>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60cb      	str	r3, [r1, #12]
 80014da:	e01b      	b.n	8001514 <HAL_RCC_OscConfig+0xa6c>
 80014dc:	46020c00 	.word	0x46020c00
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e8:	d30a      	bcc.n	8001500 <HAL_RCC_OscConfig+0xa58>
 80014ea:	4ba1      	ldr	r3, [pc, #644]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	029b      	lsls	r3, r3, #10
 80014f8:	499d      	ldr	r1, [pc, #628]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60cb      	str	r3, [r1, #12]
 80014fe:	e009      	b.n	8001514 <HAL_RCC_OscConfig+0xa6c>
 8001500:	4b9b      	ldr	r3, [pc, #620]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	03db      	lsls	r3, r3, #15
 800150e:	4998      	ldr	r1, [pc, #608]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001510:	4313      	orrs	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001514:	4b96      	ldr	r3, [pc, #600]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a95      	ldr	r2, [pc, #596]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001520:	f7ff f8c2 	bl	80006a8 <HAL_GetTick>
 8001524:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001528:	f7ff f8be 	bl	80006a8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e18b      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800153a:	4b8d      	ldr	r3, [pc, #564]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0xa80>
 8001546:	e018      	b.n	800157a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001548:	4b89      	ldr	r3, [pc, #548]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a88      	ldr	r2, [pc, #544]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 800154e:	f023 0310 	bic.w	r3, r3, #16
 8001552:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001554:	f7ff f8a8 	bl	80006a8 <HAL_GetTick>
 8001558:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800155c:	f7ff f8a4 	bl	80006a8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e171      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800156e:	4b80      	ldr	r3, [pc, #512]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0320 	and.w	r3, r3, #32
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 8166 	beq.w	8001850 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800158a:	4b79      	ldr	r3, [pc, #484]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b0c      	cmp	r3, #12
 8001594:	f000 80f2 	beq.w	800177c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159c:	2b02      	cmp	r3, #2
 800159e:	f040 80c5 	bne.w	800172c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b73      	ldr	r3, [pc, #460]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a72      	ldr	r2, [pc, #456]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80015a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80015ae:	f7ff f87b 	bl	80006a8 <HAL_GetTick>
 80015b2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b6:	f7ff f877 	bl	80006a8 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e144      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80015c8:	4b69      	ldr	r3, [pc, #420]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f0      	bne.n	80015b6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d4:	4b66      	ldr	r3, [pc, #408]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80015d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d111      	bne.n	8001606 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b63      	ldr	r3, [pc, #396]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80015e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e8:	4a61      	ldr	r2, [pc, #388]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80015ea:	f043 0304 	orr.w	r3, r3, #4
 80015ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80015f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80015f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001600:	2301      	movs	r3, #1
 8001602:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001606:	4b5b      	ldr	r3, [pc, #364]	@ (8001774 <HAL_RCC_OscConfig+0xccc>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800160e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001612:	d102      	bne.n	800161a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001614:	2301      	movs	r3, #1
 8001616:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800161a:	4b56      	ldr	r3, [pc, #344]	@ (8001774 <HAL_RCC_OscConfig+0xccc>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	4a55      	ldr	r2, [pc, #340]	@ (8001774 <HAL_RCC_OscConfig+0xccc>)
 8001620:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001624:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001626:	4b52      	ldr	r3, [pc, #328]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800162e:	f023 0303 	bic.w	r3, r3, #3
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800163a:	3a01      	subs	r2, #1
 800163c:	0212      	lsls	r2, r2, #8
 800163e:	4311      	orrs	r1, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001644:	430a      	orrs	r2, r1
 8001646:	494a      	ldr	r1, [pc, #296]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001648:	4313      	orrs	r3, r2
 800164a:	628b      	str	r3, [r1, #40]	@ 0x28
 800164c:	4b48      	ldr	r3, [pc, #288]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 800164e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001650:	4b49      	ldr	r3, [pc, #292]	@ (8001778 <HAL_RCC_OscConfig+0xcd0>)
 8001652:	4013      	ands	r3, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001658:	3a01      	subs	r2, #1
 800165a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001662:	3a01      	subs	r2, #1
 8001664:	0252      	lsls	r2, r2, #9
 8001666:	b292      	uxth	r2, r2
 8001668:	4311      	orrs	r1, r2
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800166e:	3a01      	subs	r2, #1
 8001670:	0412      	lsls	r2, r2, #16
 8001672:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800167c:	3a01      	subs	r2, #1
 800167e:	0612      	lsls	r2, r2, #24
 8001680:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8001684:	430a      	orrs	r2, r1
 8001686:	493a      	ldr	r1, [pc, #232]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001688:	4313      	orrs	r3, r2
 800168a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800168c:	4b38      	ldr	r3, [pc, #224]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 800168e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001690:	4a37      	ldr	r2, [pc, #220]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001692:	f023 0310 	bic.w	r3, r3, #16
 8001696:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800169c:	4a34      	ldr	r2, [pc, #208]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80016a2:	4b33      	ldr	r3, [pc, #204]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80016a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a6:	4a32      	ldr	r2, [pc, #200]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80016a8:	f043 0310 	orr.w	r3, r3, #16
 80016ac:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80016ae:	4b30      	ldr	r3, [pc, #192]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b2:	f023 020c 	bic.w	r2, r3, #12
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ba:	492d      	ldr	r1, [pc, #180]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80016c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <HAL_RCC_OscConfig+0xccc>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4a29      	ldr	r2, [pc, #164]	@ (8001774 <HAL_RCC_OscConfig+0xccc>)
 80016ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016d2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80016d4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d107      	bne.n	80016ec <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80016dc:	4b24      	ldr	r3, [pc, #144]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e2:	4a23      	ldr	r2, [pc, #140]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80016e4:	f023 0304 	bic.w	r3, r3, #4
 80016e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80016ec:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 80016f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016f6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80016f8:	f7fe ffd6 	bl	80006a8 <HAL_GetTick>
 80016fc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7fe ffd2 	bl	80006a8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e09f      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001712:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001722:	4a13      	ldr	r2, [pc, #76]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001728:	6293      	str	r3, [r2, #40]	@ 0x28
 800172a:	e091      	b.n	8001850 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800172c:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0f      	ldr	r2, [pc, #60]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001732:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001736:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001738:	f7fe ffb6 	bl	80006a8 <HAL_GetTick>
 800173c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001740:	f7fe ffb2 	bl	80006a8 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e07f      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001752:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800175e:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	4a03      	ldr	r2, [pc, #12]	@ (8001770 <HAL_RCC_OscConfig+0xcc8>)
 8001764:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001768:	f023 0303 	bic.w	r3, r3, #3
 800176c:	6293      	str	r3, [r2, #40]	@ 0x28
 800176e:	e06f      	b.n	8001850 <HAL_RCC_OscConfig+0xda8>
 8001770:	46020c00 	.word	0x46020c00
 8001774:	46020800 	.word	0x46020800
 8001778:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800177c:	4b37      	ldr	r3, [pc, #220]	@ (800185c <HAL_RCC_OscConfig+0xdb4>)
 800177e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001780:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001782:	4b36      	ldr	r3, [pc, #216]	@ (800185c <HAL_RCC_OscConfig+0xdb4>)
 8001784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001786:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178c:	2b01      	cmp	r3, #1
 800178e:	d039      	beq.n	8001804 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0203 	and.w	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d132      	bne.n	8001804 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d129      	bne.n	8001804 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d122      	bne.n	8001804 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d11a      	bne.n	8001804 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	0a5b      	lsrs	r3, r3, #9
 80017d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d111      	bne.n	8001804 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	0c1b      	lsrs	r3, r3, #16
 80017e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ec:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d108      	bne.n	8001804 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	0e1b      	lsrs	r3, r3, #24
 80017f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e024      	b.n	8001852 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <HAL_RCC_OscConfig+0xdb4>)
 800180a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800180c:	08db      	lsrs	r3, r3, #3
 800180e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001816:	429a      	cmp	r2, r3
 8001818:	d01a      	beq.n	8001850 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <HAL_RCC_OscConfig+0xdb4>)
 800181c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181e:	4a0f      	ldr	r2, [pc, #60]	@ (800185c <HAL_RCC_OscConfig+0xdb4>)
 8001820:	f023 0310 	bic.w	r3, r3, #16
 8001824:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7fe ff3f 	bl	80006a8 <HAL_GetTick>
 800182a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800182c:	bf00      	nop
 800182e:	f7fe ff3b 	bl	80006a8 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001836:	4293      	cmp	r3, r2
 8001838:	d0f9      	beq.n	800182e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183e:	4a07      	ldr	r2, [pc, #28]	@ (800185c <HAL_RCC_OscConfig+0xdb4>)
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001844:	4b05      	ldr	r3, [pc, #20]	@ (800185c <HAL_RCC_OscConfig+0xdb4>)
 8001846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001848:	4a04      	ldr	r2, [pc, #16]	@ (800185c <HAL_RCC_OscConfig+0xdb4>)
 800184a:	f043 0310 	orr.w	r3, r3, #16
 800184e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3738      	adds	r7, #56	@ 0x38
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	46020c00 	.word	0x46020c00

08001860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e1d9      	b.n	8001c28 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b9b      	ldr	r3, [pc, #620]	@ (8001ae4 <HAL_RCC_ClockConfig+0x284>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d910      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b98      	ldr	r3, [pc, #608]	@ (8001ae4 <HAL_RCC_ClockConfig+0x284>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 020f 	bic.w	r2, r3, #15
 800188a:	4996      	ldr	r1, [pc, #600]	@ (8001ae4 <HAL_RCC_ClockConfig+0x284>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b94      	ldr	r3, [pc, #592]	@ (8001ae4 <HAL_RCC_ClockConfig+0x284>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e1c1      	b.n	8001c28 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d010      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018bc:	429a      	cmp	r2, r3
 80018be:	d908      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80018c0:	4b89      	ldr	r3, [pc, #548]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	4986      	ldr	r1, [pc, #536]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d012      	beq.n	8001904 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	4b81      	ldr	r3, [pc, #516]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d909      	bls.n	8001904 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80018f0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	497a      	ldr	r1, [pc, #488]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001900:	4313      	orrs	r3, r2
 8001902:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d010      	beq.n	8001932 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	4b74      	ldr	r3, [pc, #464]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800191c:	429a      	cmp	r2, r3
 800191e:	d908      	bls.n	8001932 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001920:	4b71      	ldr	r3, [pc, #452]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	496e      	ldr	r1, [pc, #440]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 800192e:	4313      	orrs	r3, r2
 8001930:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d010      	beq.n	8001960 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	4b69      	ldr	r3, [pc, #420]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	429a      	cmp	r2, r3
 800194c:	d908      	bls.n	8001960 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800194e:	4b66      	ldr	r3, [pc, #408]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	f023 020f 	bic.w	r2, r3, #15
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4963      	ldr	r1, [pc, #396]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 800195c:	4313      	orrs	r3, r2
 800195e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80d2 	beq.w	8001b12 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d143      	bne.n	8001a02 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 800197c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d110      	bne.n	80019aa <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001988:	4b57      	ldr	r3, [pc, #348]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 800198a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800198e:	4a56      	ldr	r2, [pc, #344]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001998:	4b53      	ldr	r3, [pc, #332]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80019aa:	f7fe fe7d 	bl	80006a8 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80019b0:	4b4e      	ldr	r3, [pc, #312]	@ (8001aec <HAL_RCC_ClockConfig+0x28c>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00f      	beq.n	80019dc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80019be:	f7fe fe73 	bl	80006a8 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e12b      	b.n	8001c28 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80019d0:	4b46      	ldr	r3, [pc, #280]	@ (8001aec <HAL_RCC_ClockConfig+0x28c>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019e2:	4b41      	ldr	r3, [pc, #260]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 80019e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e8:	4a3f      	ldr	r2, [pc, #252]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 80019ea:	f023 0304 	bic.w	r3, r3, #4
 80019ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80019f2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d121      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e112      	b.n	8001c28 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d115      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e106      	b.n	8001c28 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001a22:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0fa      	b.n	8001c28 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0f2      	b.n	8001c28 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001a42:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f023 0203 	bic.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4926      	ldr	r1, [pc, #152]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8001a54:	f7fe fe28 	bl	80006a8 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d112      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7fe fe20 	bl	80006a8 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0d6      	b.n	8001c28 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d1ee      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x204>
 8001a86:	e044      	b.n	8001b12 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d112      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a92:	f7fe fe09 	bl	80006a8 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0bf      	b.n	8001c28 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d1ee      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x232>
 8001ab4:	e02d      	b.n	8001b12 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d123      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7fe fdf2 	bl	80006a8 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e0a8      	b.n	8001c28 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ad6:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <HAL_RCC_ClockConfig+0x288>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ee      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x260>
 8001ae2:	e016      	b.n	8001b12 <HAL_RCC_ClockConfig+0x2b2>
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	46020c00 	.word	0x46020c00
 8001aec:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7fe fdda 	bl	80006a8 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e090      	b.n	8001c28 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b06:	4b4a      	ldr	r3, [pc, #296]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d1ee      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d010      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	4b43      	ldr	r3, [pc, #268]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d208      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001b2e:	4b40      	ldr	r3, [pc, #256]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	f023 020f 	bic.w	r2, r3, #15
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	493d      	ldr	r1, [pc, #244]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b40:	4b3c      	ldr	r3, [pc, #240]	@ (8001c34 <HAL_RCC_ClockConfig+0x3d4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d210      	bcs.n	8001b70 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b39      	ldr	r3, [pc, #228]	@ (8001c34 <HAL_RCC_ClockConfig+0x3d4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 020f 	bic.w	r2, r3, #15
 8001b56:	4937      	ldr	r1, [pc, #220]	@ (8001c34 <HAL_RCC_ClockConfig+0x3d4>)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b35      	ldr	r3, [pc, #212]	@ (8001c34 <HAL_RCC_ClockConfig+0x3d4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e05b      	b.n	8001c28 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d010      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	4b2b      	ldr	r3, [pc, #172]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d208      	bcs.n	8001b9e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001b8c:	4b28      	ldr	r3, [pc, #160]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4925      	ldr	r1, [pc, #148]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d012      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d209      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	4919      	ldr	r1, [pc, #100]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d010      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	4b13      	ldr	r3, [pc, #76]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d208      	bcs.n	8001bfe <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8001bec:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	490d      	ldr	r1, [pc, #52]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001bfe:	f000 f821 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001c02:	4602      	mov	r2, r0
 8001c04:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <HAL_RCC_ClockConfig+0x3d0>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	490a      	ldr	r1, [pc, #40]	@ (8001c38 <HAL_RCC_ClockConfig+0x3d8>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	4a09      	ldr	r2, [pc, #36]	@ (8001c3c <HAL_RCC_ClockConfig+0x3dc>)
 8001c16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c18:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_RCC_ClockConfig+0x3e0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fcb9 	bl	8000594 <HAL_InitTick>
 8001c22:	4603      	mov	r3, r0
 8001c24:	73fb      	strb	r3, [r7, #15]

  return status;
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	46020c00 	.word	0x46020c00
 8001c34:	40022000 	.word	0x40022000
 8001c38:	08002010 	.word	0x08002010
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b08b      	sub	sp, #44	@ 0x2c
 8001c48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c52:	4b78      	ldr	r3, [pc, #480]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c5c:	4b75      	ldr	r3, [pc, #468]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x34>
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d121      	bne.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d11e      	bne.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8001c78:	4b6e      	ldr	r3, [pc, #440]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8001c84:	4b6b      	ldr	r3, [pc, #428]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c8a:	0b1b      	lsrs	r3, r3, #12
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c92:	e005      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8001c94:	4b67      	ldr	r3, [pc, #412]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	0f1b      	lsrs	r3, r3, #28
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ca0:	4a65      	ldr	r2, [pc, #404]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d110      	bne.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cb4:	e00d      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001cc4:	623b      	str	r3, [r7, #32]
 8001cc6:	e004      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cce:	4b5c      	ldr	r3, [pc, #368]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001cd0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	f040 80a5 	bne.w	8001e24 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001cda:	4b56      	ldr	r3, [pc, #344]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001ce4:	4b53      	ldr	r3, [pc, #332]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3301      	adds	r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001cf2:	4b50      	ldr	r3, [pc, #320]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8001cfe:	4b4d      	ldr	r3, [pc, #308]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d02:	08db      	lsrs	r3, r3, #3
 8001d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d16:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d003      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0xe4>
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d022      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x128>
 8001d26:	e043      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d32:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8001e44 <HAL_RCC_GetSysClockFreq+0x200>
 8001d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001d4a:	ed97 6a01 	vldr	s12, [r7, #4]
 8001d4e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8001e48 <HAL_RCC_GetSysClockFreq+0x204>
 8001d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d6a:	e046      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d76:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8001e4c <HAL_RCC_GetSysClockFreq+0x208>
 8001d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001d8e:	ed97 6a01 	vldr	s12, [r7, #4]
 8001d92:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8001e48 <HAL_RCC_GetSysClockFreq+0x204>
 8001d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001dae:	e024      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	ee07 3a90 	vmov	s15, r3
 8001db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001dd8:	ed97 6a01 	vldr	s12, [r7, #4]
 8001ddc:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8001e48 <HAL_RCC_GetSysClockFreq+0x204>
 8001de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001de8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001df8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dfe:	0e1b      	lsrs	r3, r3, #24
 8001e00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e04:	3301      	adds	r3, #1
 8001e06:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e1e:	ee17 3a90 	vmov	r3, s15
 8001e22:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8001e24:	6a3b      	ldr	r3, [r7, #32]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	372c      	adds	r7, #44	@ 0x2c
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	46020c00 	.word	0x46020c00
 8001e38:	08002020 	.word	0x08002020
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	017d7840 	.word	0x017d7840
 8001e44:	4b742400 	.word	0x4b742400
 8001e48:	46000000 	.word	0x46000000
 8001e4c:	4bbebc20 	.word	0x4bbebc20

08001e50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e54:	f7ff fef6 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <HAL_RCC_GetHCLKFreq+0x28>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	4906      	ldr	r1, [pc, #24]	@ (8001e7c <HAL_RCC_GetHCLKFreq+0x2c>)
 8001e64:	5ccb      	ldrb	r3, [r1, r3]
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	4a05      	ldr	r2, [pc, #20]	@ (8001e80 <HAL_RCC_GetHCLKFreq+0x30>)
 8001e6c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8001e6e:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <HAL_RCC_GetHCLKFreq+0x30>)
 8001e70:	681b      	ldr	r3, [r3, #0]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	46020c00 	.word	0x46020c00
 8001e7c:	08002010 	.word	0x08002010
 8001e80:	20000000 	.word	0x20000000

08001e84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f88 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e9a:	f7fe fdf7 	bl	8000a8c <HAL_PWREx_GetVoltageRange>
 8001e9e:	6178      	str	r0, [r7, #20]
 8001ea0:	e019      	b.n	8001ed6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b39      	ldr	r3, [pc, #228]	@ (8001f88 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea8:	4a37      	ldr	r2, [pc, #220]	@ (8001f88 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001eb2:	4b35      	ldr	r3, [pc, #212]	@ (8001f88 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ec0:	f7fe fde4 	bl	8000a8c <HAL_PWREx_GetVoltageRange>
 8001ec4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ec6:	4b30      	ldr	r3, [pc, #192]	@ (8001f88 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8001f88 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001ece:	f023 0304 	bic.w	r3, r3, #4
 8001ed2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001edc:	d003      	beq.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ee4:	d109      	bne.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001eec:	d202      	bcs.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8001ef2:	e033      	b.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8001ef8:	e030      	b.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f00:	d208      	bcs.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f08:	d102      	bne.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	e025      	b.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e035      	b.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f1a:	d90f      	bls.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8001f28:	d902      	bls.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	e015      	b.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8001f30:	2301      	movs	r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	e012      	b.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	e00f      	b.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f42:	d109      	bne.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f4a:	d102      	bne.n	8001f52 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	e004      	b.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8001f52:	2302      	movs	r3, #2
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	e001      	b.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8001f58:	2301      	movs	r3, #1
 8001f5a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 020f 	bic.w	r2, r3, #15
 8001f64:	4909      	ldr	r1, [pc, #36]	@ (8001f8c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001f6c:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d001      	beq.n	8001f7e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	46020c00 	.word	0x46020c00
 8001f8c:	40022000 	.word	0x40022000

08001f90 <app_sm_init>:
 */

#include "app_sm.h"

void app_sm_init(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <memset>:
 8001f9e:	4402      	add	r2, r0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d100      	bne.n	8001fa8 <memset+0xa>
 8001fa6:	4770      	bx	lr
 8001fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8001fac:	e7f9      	b.n	8001fa2 <memset+0x4>
	...

08001fb0 <__libc_init_array>:
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	4d0d      	ldr	r5, [pc, #52]	@ (8001fe8 <__libc_init_array+0x38>)
 8001fb4:	2600      	movs	r6, #0
 8001fb6:	4c0d      	ldr	r4, [pc, #52]	@ (8001fec <__libc_init_array+0x3c>)
 8001fb8:	1b64      	subs	r4, r4, r5
 8001fba:	10a4      	asrs	r4, r4, #2
 8001fbc:	42a6      	cmp	r6, r4
 8001fbe:	d109      	bne.n	8001fd4 <__libc_init_array+0x24>
 8001fc0:	4d0b      	ldr	r5, [pc, #44]	@ (8001ff0 <__libc_init_array+0x40>)
 8001fc2:	2600      	movs	r6, #0
 8001fc4:	4c0b      	ldr	r4, [pc, #44]	@ (8001ff4 <__libc_init_array+0x44>)
 8001fc6:	f000 f817 	bl	8001ff8 <_init>
 8001fca:	1b64      	subs	r4, r4, r5
 8001fcc:	10a4      	asrs	r4, r4, #2
 8001fce:	42a6      	cmp	r6, r4
 8001fd0:	d105      	bne.n	8001fde <__libc_init_array+0x2e>
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
 8001fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fd8:	3601      	adds	r6, #1
 8001fda:	4798      	blx	r3
 8001fdc:	e7ee      	b.n	8001fbc <__libc_init_array+0xc>
 8001fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe2:	3601      	adds	r6, #1
 8001fe4:	4798      	blx	r3
 8001fe6:	e7f2      	b.n	8001fce <__libc_init_array+0x1e>
 8001fe8:	08002060 	.word	0x08002060
 8001fec:	08002060 	.word	0x08002060
 8001ff0:	08002060 	.word	0x08002060
 8001ff4:	08002064 	.word	0x08002064

08001ff8 <_init>:
 8001ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffa:	bf00      	nop
 8001ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffe:	bc08      	pop	{r3}
 8002000:	469e      	mov	lr, r3
 8002002:	4770      	bx	lr

08002004 <_fini>:
 8002004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002006:	bf00      	nop
 8002008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800200a:	bc08      	pop	{r3}
 800200c:	469e      	mov	lr, r3
 800200e:	4770      	bx	lr
